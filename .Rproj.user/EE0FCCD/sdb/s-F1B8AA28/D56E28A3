{
    "collab_server" : "",
    "contents" : "library(plotrix)\nlibrary(pdfetch)\nlibrary(networkD3)\nlibrary(knitr)\n\n## pdfecth\n\n?pdfetch_EUROSTAT\n\n## Example 1: Net lending per sector, UK\n\n# Specifying the name of the flows of interests\nnames<-c(\"B9\")\n\n# Downloading the data by specifying the various filters\nUKdata_raw = pdfetch_EUROSTAT(flowRef = \"nasa_10_nf_tr\", UNIT=\"CP_MNAC\",NA_ITEM=names, GEO=\"UK\", \n                              DIRECT=\"PAID\",SECTOR=c(\"S11\",\"S12\",\"S13\",\"S14_S15\",\"S2\"))\n\n# Transforming the obtained data into a data.frame\nUKdata<-as.data.frame(UKdata_raw)\n\n# Setting readable names\ncolnames(UKdata)<-c(\"NFC\",\"FC\",\"Govt\",\"HH\",\"RoW\")\n\n# Matricial plot\nmatplot(1995:2015,UKdata,lwd=2,type=\"l\",lty=1,ylab=\"\",xlab=\"\",col=2:6)\n\n# Adding the horizontal line\nabline(h=0,col=1)\n\n# Adding a grid\ngrid()\n\n# Adding a legend\nlegend(\"bottomleft\",col=c(2:6),lwd=2,lty=1,legend=c(\"NFC\",\"FC\",\"Govt\",\"HH\",\"RoW\"),bty='n')\n\n## Example 2: Household income statement from 2014\n\n# Selecting the flows\nnames<-c(\"B5G\",\"D5\",\"D61\",\"D62\",\"D7\",\"D8\",\"B6G\",\"P3\",\"B8G\",\"P5G\",\"D9\",\"NP\",\"B9\")\n\n# Obtaining the data\nEZdata_raw = pdfetch_EUROSTAT(\"nasa_10_nf_tr\", UNIT=\"CP_MNAC\",NA_ITEM=names, GEO=\"EU28\",\n                              SECTOR=c(\"S14_S15\"), TIME=\"2014\")\n\n# Transforming the data into a data.frame\nEZdata<-as.data.frame(EZdata_raw)\n\n# Automatic procedure to remove the non-interesting bit of the colnames\ncoln<-colnames(EZdata)\nnewcoln<-c()\nHHdata<-c()\n\nfor(i in 1:length(coln)){\n  name<-coln[i]\n  tname<-strsplit(name,\"\\\\.\")[[1]]\n  newname<-paste(tname[3:4],collapse=\".\")\n  # If the column contains only NA, remove it from the dataset\n  if(!is.na(EZdata[16,i])){\n    newcoln<-c(newcoln,newname) \n    HHdata<-c(HHdata,EZdata[16,i])\n  }\n}\n\n# Creating a new dataset with only values 2014\nHHdata<-as.data.frame(t(HHdata))\ncolnames(HHdata)<-newcoln\n\n# Creating the aggregates\nHHdata_1<-as.data.frame(c(HHdata$PAID.B5G,-HHdata$PAID.D5,-HHdata$PAID.D61+HHdata$RECV.D61,\n                          +HHdata$RECV.D62-HHdata$PAID.D62,-HHdata$PAID.D7+HHdata$RECV.D7,HHdata$PAID.B6G))\ncolnames(HHdata_1)<-\"2014\"\nrownames(HHdata_1)<-c(\"Total Income\",\"Taxes\",\"Social Contributions\",\"Social Benefits\",\n                      \"Other transfers\",\"Gross Disposable Income\")\nkable(HHdata_1)\n\nHHdata_2<-as.data.frame(c(HHdata$PAID.B6G,-HHdata$PAID.P3,-HHdata$PAID.D8+HHdata$RECV.D8,\n                          HHdata$PAID.B8G))\ncolnames(HHdata_2)<-\"2014\"\nrownames(HHdata_2)<-c(\"Gross Disposable Income\",\"Consumption\",\"Adjustments in Pensions\",\n                      \"Gross Savings\")\nkable(HHdata_2)\n\nHHdata_3<-as.data.frame(c(HHdata$PAID.B8G,-HHdata$PAID.P5G,-HHdata$PAID.D9+HHdata$RECV.D9,\n                          -HHdata$PAID.NP,HHdata$PAID.B9))\n\ncolnames(HHdata_3)<-\"2014\"\nrownames(HHdata_3)<-c(\"Gross Savings\",\"Gross Capital Formation\",\"Capital Transfer\",\n                      \"Net Non-Produced NF Assets\",\"Net Lending Position\")\nkable(HHdata_3)\n\n\n## Installing the dependent libraries and the package\n\ninstall.packages(\"expm\")\ninstall.packages(\"igraph\")\nsource(\"http://bioconductor.org/biocLite.R\")\nbiocLite(\"Rgraphviz\")\n\ninstall.packages(\"path/PKSFC_1.5.tar.gz\", repos = NULL, type=\"source\")\n\n## Testing\nlibrary(PKSFC)\n\nsim<-sfc.model(\"SIM.txt\",modelName=\"SIMplest model from chapter 3 of Godley and Lavoie (2007)\")\ndatasim<-simulate(sim)\nplot(sim$time,datasim$baseline[,\"Yd\"],type=\"l\", xlab=\"\", ylab=\"\", lty=2, \n     ylim=range(datasim$baseline[,c(\"Yd\",\"C\")],na.rm=T))\nlines(sim$time,datasim$baseline[,\"C\"],lty=3)\nlines(sim$time,vector(length=length(sim$time))+datasim$baseline[\"2010\",\"C\"])\nlegend(x=1970,y=50,legend=c(\"Disposable Income\",\"Consumption\",\"Steady State\"),lty=c(2,3,1),bty=\"n\")\n\n\n## Internal representation\n\nprint(sim)\n\n## Output data structure\n\nkable(datasim$baseline)\n\n\n## Direct Acyclic graphs\n\nsimex<-sfc.model(\"SIMEX.txt\",modelName=\"SIMplest model with expectation\")\nlayout(matrix(c(1,2),1,2))\nplot.dag(sim,main=\"SIM\" )\nplot.dag(simex,main=\"SIMEX\" )\n\n## In the case of a more complex model - Chapter 6\n\nch6 <- sfc.model(\"ch6.txt\",modelName=\"Chapter6_openmodel\")\ngraphs = generate.DAG.collapse( adjacency = ch6$matrix )\npar(mfrow = c(1,3))\n# first plot the orgianl grpah\nplot_graph_hierarchy( graphs$orginal_graph, main = \"orginal graph\" )\n# plot hte nodes that form the strongly connected compoent\nplot_graph_hierarchy( graphs$SCC_graph, main = \"SCC nodes\" )\n# plot the result ing DAG when we take the condensation of the graph\nplot_graph_hierarchy( graphs$DAG, main = \"resulting DAG\" )\n\n## Systems of dependent vs independent equations \n\ndatasimex<-simulate(simex)\ninit = datasimex$baseline[66,]\nsimex<-sfc.addScenario(simex,\"G\",25,1960,2010,init)\ndatasimex<-simulate(simex)\ndatasim<-simulate(sim)\ninit = datasim$baseline[66,]\nsim<-sfc.addScenario(sim,\"G\",25,1960,2010,init)\ndatasim<-simulate(sim)\nplot(sim$time,datasim$scenario_1[,\"H\"],type=\"l\",xlab=\"\",ylab=\"\",main=\"SIM\")\nlines(sim$time,datasim$scenario_1[,\"C\"],lty=2)\nlines(sim$time,datasim$scenario_1[,\"Yd\"],lty=3)\nlegend(x=1944,y=130,legend=c(\"Wealth\",\"Consumption\",\"Disposable Income\"),\n       lty=c(1,2,3),bty=\"n\")\nplot(simex$time,datasimex$scenario_1[,\"H\"],type=\"l\",xlab=\"\",ylab=\"\",main=\"SIMEX\")\nlines(simex$time,datasimex$scenario_1[,\"C\"],lty=2)\nlines(simex$time,datasimex$scenario_1[,\"Yd\"],lty=3)\nlines(simex$time,datasimex$scenario_1[,\"Yd_e\"],lty=4)\nlegend(x=1944,y=130,legend=c(\"Wealth\",\"Consumption\",\"Disposable Income\",\n                             \"Expecetd Disposable Income\"),lty=c(1,2,3,4),bty=\"n\")\n## Computational implications\n\nptm <- proc.time()\ndata1<-simulate(sim)\nprint(paste(\"Elapsed time is \",proc.time()[3]-ptm[3],\"seconds\"))\n\n#  1. tolValue\nptm <- proc.time()\ndata2<-simulate(sim,tolValue = 1e-3)\nprint(paste(\"Elapsed time is \",proc.time()[3]-ptm[3],\"seconds\"))\n\n# 2. maxIter\nptm <- proc.time()\ndata3<-simulate(sim, maxIter=10)\nprint(paste(\"Elapsed time is \",proc.time()[3]-ptm[3],\"seconds\"))\n\n## Observing the results of the three simulations\nkable(round(t(data1$baseline[c(1,2,20,40,66),c(\"G\",\"Y\",\"T\",\"Yd\",\"C\",\"H\",\"H_h\")]),digits=3))\nkable(round(t(data2$baseline[c(1,2,20,40,66),c(\"G\",\"Y\",\"T\",\"Yd\",\"C\",\"H\",\"H_h\")]),digits=3))\nkable(round(t(data3$baseline[c(1,2,20,40,66),c(\"G\",\"Y\",\"T\",\"Yd\",\"C\",\"H\",\"H_h\")]),digits=3))\n\n## Block Gauss-Seidel\n\nprint(simex)\n\n\n## Simulation of SIMEX\n\nptm <- proc.time()\ndataex<-simulate(simex,tolValue = 1e-10)\nprint(paste(\"Elapsed time is \",proc.time()[3]-ptm[3],\"seconds\"))\n\n## Results for SIMEX\n\nkable(round(t(dataex$baseline[c(1,2,20,40,66),c(\"G\",\"Y\",\"T\",\"Yd\",\"Yd_e\",\"C\",\"H\",\"H_h\")]),digits=3))\n\n## Output data structure\n\nkable(dataex$baseline)\n\n## Checking the number of iteractions\n\n# For sim, no simulate parameters:\nkable(round(t(data1$baseline[c(1,2,20,40,66),c(\"iter block 1\")]),digits=3))\n\n# For sim, tolValue fixed:\nkable(round(t(data2$baseline[c(1,2,20,40,66),c(\"iter block 1\")]),digits=3))\n\n# For sim, maxIter fixed:\nkable(round(t(data2$baseline[c(1,2,20,40,66),c(\"iter block 1\")]),digits=3))\n\n# For simex, no simulate parameters\nkable(round(t(dataex$baseline[c(1,2,20,40,66),c(\"iter block 1\",\"iter block 2\",\"iter block 3\",\"iter block 4\",\"iter block 5\",\"iter block 6\",\"iter block 7\")]),digits=3))\n\n## Buffer stocks, using model PC\n\npc<-sfc.model(\"PC.txt\",modelName=\"Portfolio Choice Model\")\n# Changing Existing equations\npcRand<-sfc.editEqus(pc,list(\n  list(var=\"cons\",eq=\"alpha1*yde+alpha2*v(-1)\"),\n  list(var=\"b_h\",eq=\"ve*(lambda0 + lambda1*r - lambda2*(yde/ve))\")))\n\n# Adding equations\npcRand<-sfc.addEqus(pcRand,list(\n  list(var=\"yde\",eq=\"yd(-1)*(1+rnorm(1,sd=0.1))\",desc=\"Expected disposable income depending on random shocks\"),\n  list(var=\"h_d\",eq=\"ve-b_h\",desc=\"Money demand\"),\n  list(var=\"ve\",eq=\"v(-1)+yde-cons\",desc=\"Expected disposable income\")))\n\n# Adding the initial value of yd (to be used in the expectation function)\npcRand<-sfc.editVar(pcRand,var=\"yd\",init=86.48648)\n\n# Checking if the model is complete\npcRand<-sfc.check(pcRand)\n\nplot.dag(pcRand,main=\"PC Random\" )\n\ndatapcRand<-simulate(pcRand,maxIter=2)\nplot(pcRand$time,datapcRand$baseline[,\"h_h\"],type=\"l\",xlab=\"\",ylab=\"\",lty=1,lwd=2,\n     ylim=c(1*min(datapcRand$baseline[,c(\"h_h\",\"h_d\")],na.rm=T),\n            1.2*max(datapcRand$baseline[,c(\"h_h\",\"h_d\")],na.rm=T)))\nlines(pcRand$time,datapcRand$baseline[,\"h_d\"],lty=2,lwd=2)\nlegend(x=1950,y=1.2*max(datapcRand$baseline[,c(\"h_h\",\"h_d\")],na.rm=T),\n       legend=c(\"Money held\",\"Money demand\"),lty=c(2,1),lwd=2,bty=\"n\")\n\n## Sankey Diagrams\n\nplot.sankey(as.data.frame(datapcRand$baseline),filename=\"TFM_PC.csv\",period=2)\n",
    "created" : 1470221079160.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2385485326",
    "id" : "D56E28A3",
    "lastKnownWriteTime" : 1470180771,
    "last_content_update" : 1470180771,
    "path" : "C:/Users/ku57637/Dropbox/Research/Seminars/AppliedSFC_R/SourceCode.R",
    "project_path" : "SourceCode.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}